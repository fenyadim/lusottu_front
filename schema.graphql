# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

union Morph = Brand | BrandAggregator | BrandConnection | BrandConnectionCreatedAt | BrandConnectionId | BrandConnectionName | BrandConnectionPublished_at | BrandConnectionSlug | BrandConnectionUpdatedAt | BrandConnection_id | BrandGroupBy | ComponentAttributesBaseNotes | ComponentAttributesMiddleNotes | ComponentAttributesPerfumer | ComponentAttributesTest | ComponentAttributesTopNotes | Products | ProductsAggregator | ProductsAggregatorAvg | ProductsAggregatorMax | ProductsAggregatorMin | ProductsAggregatorSum | ProductsConnection | ProductsConnectionBrand | ProductsConnectionCreatedAt | ProductsConnectionDesc | ProductsConnectionGender | ProductsConnectionId | ProductsConnectionImage | ProductsConnectionIn_stock | ProductsConnectionName | ProductsConnectionNotes | ProductsConnectionPrice | ProductsConnectionPublished_at | ProductsConnectionSlug | ProductsConnectionType | ProductsConnectionUpdatedAt | ProductsConnectionVolume | ProductsConnection_id | ProductsGroupBy | Types | TypesAggregator | TypesConnection | TypesConnectionCreatedAt | TypesConnectionId | TypesConnectionName | TypesConnectionPublished_at | TypesConnectionSlug | TypesConnectionUpdatedAt | TypesConnection_id | TypesGroupBy | UploadFile | UploadFileAggregator | UploadFileAggregatorAvg | UploadFileAggregatorMax | UploadFileAggregatorMin | UploadFileAggregatorSum | UploadFileConnection | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionCreatedAt | UploadFileConnectionExt | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionHeight | UploadFileConnectionId | UploadFileConnectionMime | UploadFileConnectionName | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | UploadFileConnectionSize | UploadFileConnectionUpdatedAt | UploadFileConnectionUrl | UploadFileConnectionWidth | UploadFileConnection_id | UploadFileGroupBy | UserPermissionsPasswordPayload | UsersPermissionsLoginPayload | UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleAggregator | UsersPermissionsRoleConnection | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionType | UsersPermissionsRoleConnection_id | UsersPermissionsRoleGroupBy | UsersPermissionsUser | UsersPermissionsUserAggregator | UsersPermissionsUserConnection | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionCreatedAt | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionRole | UsersPermissionsUserConnectionUpdatedAt | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnection_id | UsersPermissionsUserGroupBy | createBrandPayload | createProductPayload | createRolePayload | createTypePayload | createUserPayload | deleteBrandPayload | deleteFilePayload | deleteProductPayload | deleteRolePayload | deleteTypePayload | deleteUserPayload | updateBrandPayload | updateProductPayload | updateRolePayload | updateTypePayload | updateUserPayload

type AdminUser {
    firstname: String!
    id: ID!
    lastname: String!
    username: String
}

type Brand {
    _id: ID!
    createdAt: DateTime!
    id: ID!
    name: String
    products(limit: Int, sort: String, start: Int, where: JSON): [Products]
    published_at: DateTime
    slug: String
    updatedAt: DateTime!
}

type BrandAggregator {
    count: Int
    totalCount: Int
}

type BrandConnection {
    aggregate: BrandAggregator
    groupBy: BrandGroupBy
    values: [Brand]
}

type BrandConnectionCreatedAt {
    connection: BrandConnection
    key: DateTime
}

type BrandConnectionId {
    connection: BrandConnection
    key: ID
}

type BrandConnectionName {
    connection: BrandConnection
    key: String
}

type BrandConnectionPublished_at {
    connection: BrandConnection
    key: DateTime
}

type BrandConnectionSlug {
    connection: BrandConnection
    key: String
}

type BrandConnectionUpdatedAt {
    connection: BrandConnection
    key: DateTime
}

type BrandConnection_id {
    connection: BrandConnection
    key: ID
}

type BrandGroupBy {
    _id: [BrandConnection_id]
    createdAt: [BrandConnectionCreatedAt]
    id: [BrandConnectionId]
    name: [BrandConnectionName]
    published_at: [BrandConnectionPublished_at]
    slug: [BrandConnectionSlug]
    updatedAt: [BrandConnectionUpdatedAt]
}

type ComponentAttributesBaseNotes {
    _id: ID!
    desc: String
    id: ID!
}

type ComponentAttributesMiddleNotes {
    _id: ID!
    desc: String
    id: ID!
}

type ComponentAttributesPerfumer {
    _id: ID!
    desc: String
    id: ID!
}

type ComponentAttributesTest {
    _id: ID!
    id: ID!
}

type ComponentAttributesTopNotes {
    _id: ID!
    desc: String
    id: ID!
}

type Mutation {
    createBrand(input: createBrandInput): createBrandPayload
    createProduct(input: createProductInput): createProductPayload
    "Create a new role"
    createRole(input: createRoleInput): createRolePayload
    createType(input: createTypeInput): createTypePayload
    "Create a new user"
    createUser(input: createUserInput): createUserPayload
    deleteBrand(input: deleteBrandInput): deleteBrandPayload
    "Delete one file"
    deleteFile(input: deleteFileInput): deleteFilePayload
    deleteProduct(input: deleteProductInput): deleteProductPayload
    "Delete an existing role"
    deleteRole(input: deleteRoleInput): deleteRolePayload
    deleteType(input: deleteTypeInput): deleteTypePayload
    "Delete an existing user"
    deleteUser(input: deleteUserInput): deleteUserPayload
    emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
    forgotPassword(email: String!): UserPermissionsPasswordPayload
    login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
    multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID, source: String): [UploadFile]!
    register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
    resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
    updateBrand(input: updateBrandInput): updateBrandPayload
    updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
    updateProduct(input: updateProductInput): updateProductPayload
    "Update an existing role"
    updateRole(input: updateRoleInput): updateRolePayload
    updateType(input: updateTypeInput): updateTypePayload
    "Update an existing user"
    updateUser(input: updateUserInput): updateUserPayload
    upload(field: String, file: Upload!, info: FileInfoInput, ref: String, refId: ID, source: String): UploadFile!
}

type Products {
    _id: ID!
    brand: Brand
    createdAt: DateTime!
    desc: String
    gender: ENUM_PRODUCTS_GENDER
    id: ID!
    image: UploadFile
    in_stock: Boolean
    name: String
    notes: String
    price: Int
    published_at: DateTime
    slug: String
    type: Types
    updatedAt: DateTime!
    volume: Int
}

type ProductsAggregator {
    avg: ProductsAggregatorAvg
    count: Int
    max: ProductsAggregatorMax
    min: ProductsAggregatorMin
    sum: ProductsAggregatorSum
    totalCount: Int
}

type ProductsAggregatorAvg {
    price: Float
    volume: Float
}

type ProductsAggregatorMax {
    price: Float
    volume: Float
}

type ProductsAggregatorMin {
    price: Float
    volume: Float
}

type ProductsAggregatorSum {
    price: Float
    volume: Float
}

type ProductsConnection {
    aggregate: ProductsAggregator
    groupBy: ProductsGroupBy
    values: [Products]
}

type ProductsConnectionBrand {
    connection: ProductsConnection
    key: ID
}

type ProductsConnectionCreatedAt {
    connection: ProductsConnection
    key: DateTime
}

type ProductsConnectionDesc {
    connection: ProductsConnection
    key: String
}

type ProductsConnectionGender {
    connection: ProductsConnection
    key: String
}

type ProductsConnectionId {
    connection: ProductsConnection
    key: ID
}

type ProductsConnectionImage {
    connection: ProductsConnection
    key: ID
}

type ProductsConnectionIn_stock {
    connection: ProductsConnection
    key: Boolean
}

type ProductsConnectionName {
    connection: ProductsConnection
    key: String
}

type ProductsConnectionNotes {
    connection: ProductsConnection
    key: String
}

type ProductsConnectionPrice {
    connection: ProductsConnection
    key: Int
}

type ProductsConnectionPublished_at {
    connection: ProductsConnection
    key: DateTime
}

type ProductsConnectionSlug {
    connection: ProductsConnection
    key: String
}

type ProductsConnectionType {
    connection: ProductsConnection
    key: ID
}

type ProductsConnectionUpdatedAt {
    connection: ProductsConnection
    key: DateTime
}

type ProductsConnectionVolume {
    connection: ProductsConnection
    key: Int
}

type ProductsConnection_id {
    connection: ProductsConnection
    key: ID
}

type ProductsGroupBy {
    _id: [ProductsConnection_id]
    brand: [ProductsConnectionBrand]
    createdAt: [ProductsConnectionCreatedAt]
    desc: [ProductsConnectionDesc]
    gender: [ProductsConnectionGender]
    id: [ProductsConnectionId]
    image: [ProductsConnectionImage]
    in_stock: [ProductsConnectionIn_stock]
    name: [ProductsConnectionName]
    notes: [ProductsConnectionNotes]
    price: [ProductsConnectionPrice]
    published_at: [ProductsConnectionPublished_at]
    slug: [ProductsConnectionSlug]
    type: [ProductsConnectionType]
    updatedAt: [ProductsConnectionUpdatedAt]
    volume: [ProductsConnectionVolume]
}

type Query {
    brand(id: ID!, publicationState: PublicationState): Brand
    brands(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [Brand]
    brandsConnection(limit: Int, sort: String, start: Int, where: JSON): BrandConnection
    files(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [UploadFile]
    filesConnection(limit: Int, sort: String, start: Int, where: JSON): UploadFileConnection
    me: UsersPermissionsMe
    product(id: ID!, publicationState: PublicationState): Products
    productFindSlug(id: ID, slug: String): Products
    products(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [Products]
    productsConnection(limit: Int, sort: String, start: Int, where: JSON): ProductsConnection
    role(id: ID!, publicationState: PublicationState): UsersPermissionsRole
    "Retrieve all the existing roles. You can't apply filters on this query."
    roles(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [UsersPermissionsRole]
    rolesConnection(limit: Int, sort: String, start: Int, where: JSON): UsersPermissionsRoleConnection
    type(id: ID!, publicationState: PublicationState): Types
    types(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [Types]
    typesConnection(limit: Int, sort: String, start: Int, where: JSON): TypesConnection
    user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
    users(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [UsersPermissionsUser]
    usersConnection(limit: Int, sort: String, start: Int, where: JSON): UsersPermissionsUserConnection
}

type Types {
    _id: ID!
    createdAt: DateTime!
    id: ID!
    name: String
    products(limit: Int, sort: String, start: Int, where: JSON): [Products]
    published_at: DateTime
    slug: String
    updatedAt: DateTime!
}

type TypesAggregator {
    count: Int
    totalCount: Int
}

type TypesConnection {
    aggregate: TypesAggregator
    groupBy: TypesGroupBy
    values: [Types]
}

type TypesConnectionCreatedAt {
    connection: TypesConnection
    key: DateTime
}

type TypesConnectionId {
    connection: TypesConnection
    key: ID
}

type TypesConnectionName {
    connection: TypesConnection
    key: String
}

type TypesConnectionPublished_at {
    connection: TypesConnection
    key: DateTime
}

type TypesConnectionSlug {
    connection: TypesConnection
    key: String
}

type TypesConnectionUpdatedAt {
    connection: TypesConnection
    key: DateTime
}

type TypesConnection_id {
    connection: TypesConnection
    key: ID
}

type TypesGroupBy {
    _id: [TypesConnection_id]
    createdAt: [TypesConnectionCreatedAt]
    id: [TypesConnectionId]
    name: [TypesConnectionName]
    published_at: [TypesConnectionPublished_at]
    slug: [TypesConnectionSlug]
    updatedAt: [TypesConnectionUpdatedAt]
}

type UploadFile {
    _id: ID!
    alternativeText: String
    caption: String
    createdAt: DateTime!
    ext: String
    formats: JSON
    hash: String!
    height: Int
    id: ID!
    mime: String!
    name: String!
    previewUrl: String
    provider: String!
    provider_metadata: JSON
    related(limit: Int, sort: String, start: Int, where: JSON): [Morph]
    size: Float!
    updatedAt: DateTime!
    url: String!
    width: Int
}

type UploadFileAggregator {
    avg: UploadFileAggregatorAvg
    count: Int
    max: UploadFileAggregatorMax
    min: UploadFileAggregatorMin
    sum: UploadFileAggregatorSum
    totalCount: Int
}

type UploadFileAggregatorAvg {
    height: Float
    size: Float
    width: Float
}

type UploadFileAggregatorMax {
    height: Float
    size: Float
    width: Float
}

type UploadFileAggregatorMin {
    height: Float
    size: Float
    width: Float
}

type UploadFileAggregatorSum {
    height: Float
    size: Float
    width: Float
}

type UploadFileConnection {
    aggregate: UploadFileAggregator
    groupBy: UploadFileGroupBy
    values: [UploadFile]
}

type UploadFileConnectionAlternativeText {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionCaption {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionCreatedAt {
    connection: UploadFileConnection
    key: DateTime
}

type UploadFileConnectionExt {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionFormats {
    connection: UploadFileConnection
    key: JSON
}

type UploadFileConnectionHash {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionHeight {
    connection: UploadFileConnection
    key: Int
}

type UploadFileConnectionId {
    connection: UploadFileConnection
    key: ID
}

type UploadFileConnectionMime {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionName {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionPreviewUrl {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionProvider {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionProvider_metadata {
    connection: UploadFileConnection
    key: JSON
}

type UploadFileConnectionSize {
    connection: UploadFileConnection
    key: Float
}

type UploadFileConnectionUpdatedAt {
    connection: UploadFileConnection
    key: DateTime
}

type UploadFileConnectionUrl {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionWidth {
    connection: UploadFileConnection
    key: Int
}

type UploadFileConnection_id {
    connection: UploadFileConnection
    key: ID
}

type UploadFileGroupBy {
    _id: [UploadFileConnection_id]
    alternativeText: [UploadFileConnectionAlternativeText]
    caption: [UploadFileConnectionCaption]
    createdAt: [UploadFileConnectionCreatedAt]
    ext: [UploadFileConnectionExt]
    formats: [UploadFileConnectionFormats]
    hash: [UploadFileConnectionHash]
    height: [UploadFileConnectionHeight]
    id: [UploadFileConnectionId]
    mime: [UploadFileConnectionMime]
    name: [UploadFileConnectionName]
    previewUrl: [UploadFileConnectionPreviewUrl]
    provider: [UploadFileConnectionProvider]
    provider_metadata: [UploadFileConnectionProvider_metadata]
    size: [UploadFileConnectionSize]
    updatedAt: [UploadFileConnectionUpdatedAt]
    url: [UploadFileConnectionUrl]
    width: [UploadFileConnectionWidth]
}

type UserPermissionsPasswordPayload {
    ok: Boolean!
}

type UsersPermissionsLoginPayload {
    jwt: String
    user: UsersPermissionsMe!
}

type UsersPermissionsMe {
    blocked: Boolean
    confirmed: Boolean
    email: String!
    id: ID!
    role: UsersPermissionsMeRole
    username: String!
}

type UsersPermissionsMeRole {
    description: String
    id: ID!
    name: String!
    type: String
}

type UsersPermissionsPermission {
    _id: ID!
    action: String!
    controller: String!
    enabled: Boolean!
    id: ID!
    policy: String
    role: UsersPermissionsRole
    type: String!
}

type UsersPermissionsRole {
    _id: ID!
    description: String
    id: ID!
    name: String!
    permissions(limit: Int, sort: String, start: Int, where: JSON): [UsersPermissionsPermission]
    type: String
    users(limit: Int, sort: String, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
    count: Int
    totalCount: Int
}

type UsersPermissionsRoleConnection {
    aggregate: UsersPermissionsRoleAggregator
    groupBy: UsersPermissionsRoleGroupBy
    values: [UsersPermissionsRole]
}

type UsersPermissionsRoleConnectionDescription {
    connection: UsersPermissionsRoleConnection
    key: String
}

type UsersPermissionsRoleConnectionId {
    connection: UsersPermissionsRoleConnection
    key: ID
}

type UsersPermissionsRoleConnectionName {
    connection: UsersPermissionsRoleConnection
    key: String
}

type UsersPermissionsRoleConnectionType {
    connection: UsersPermissionsRoleConnection
    key: String
}

type UsersPermissionsRoleConnection_id {
    connection: UsersPermissionsRoleConnection
    key: ID
}

type UsersPermissionsRoleGroupBy {
    _id: [UsersPermissionsRoleConnection_id]
    description: [UsersPermissionsRoleConnectionDescription]
    id: [UsersPermissionsRoleConnectionId]
    name: [UsersPermissionsRoleConnectionName]
    type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
    _id: ID!
    blocked: Boolean
    confirmed: Boolean
    createdAt: DateTime!
    email: String!
    id: ID!
    provider: String
    role: UsersPermissionsRole
    updatedAt: DateTime!
    username: String!
}

type UsersPermissionsUserAggregator {
    count: Int
    totalCount: Int
}

type UsersPermissionsUserConnection {
    aggregate: UsersPermissionsUserAggregator
    groupBy: UsersPermissionsUserGroupBy
    values: [UsersPermissionsUser]
}

type UsersPermissionsUserConnectionBlocked {
    connection: UsersPermissionsUserConnection
    key: Boolean
}

type UsersPermissionsUserConnectionConfirmed {
    connection: UsersPermissionsUserConnection
    key: Boolean
}

type UsersPermissionsUserConnectionCreatedAt {
    connection: UsersPermissionsUserConnection
    key: DateTime
}

type UsersPermissionsUserConnectionEmail {
    connection: UsersPermissionsUserConnection
    key: String
}

type UsersPermissionsUserConnectionId {
    connection: UsersPermissionsUserConnection
    key: ID
}

type UsersPermissionsUserConnectionProvider {
    connection: UsersPermissionsUserConnection
    key: String
}

type UsersPermissionsUserConnectionRole {
    connection: UsersPermissionsUserConnection
    key: ID
}

type UsersPermissionsUserConnectionUpdatedAt {
    connection: UsersPermissionsUserConnection
    key: DateTime
}

type UsersPermissionsUserConnectionUsername {
    connection: UsersPermissionsUserConnection
    key: String
}

type UsersPermissionsUserConnection_id {
    connection: UsersPermissionsUserConnection
    key: ID
}

type UsersPermissionsUserGroupBy {
    _id: [UsersPermissionsUserConnection_id]
    blocked: [UsersPermissionsUserConnectionBlocked]
    confirmed: [UsersPermissionsUserConnectionConfirmed]
    createdAt: [UsersPermissionsUserConnectionCreatedAt]
    email: [UsersPermissionsUserConnectionEmail]
    id: [UsersPermissionsUserConnectionId]
    provider: [UsersPermissionsUserConnectionProvider]
    role: [UsersPermissionsUserConnectionRole]
    updatedAt: [UsersPermissionsUserConnectionUpdatedAt]
    username: [UsersPermissionsUserConnectionUsername]
}

type createBrandPayload {
    brand: Brand
}

type createProductPayload {
    product: Products
}

type createRolePayload {
    role: UsersPermissionsRole
}

type createTypePayload {
    type: Types
}

type createUserPayload {
    user: UsersPermissionsUser
}

type deleteBrandPayload {
    brand: Brand
}

type deleteFilePayload {
    file: UploadFile
}

type deleteProductPayload {
    product: Products
}

type deleteRolePayload {
    role: UsersPermissionsRole
}

type deleteTypePayload {
    type: Types
}

type deleteUserPayload {
    user: UsersPermissionsUser
}

type updateBrandPayload {
    brand: Brand
}

type updateProductPayload {
    product: Products
}

type updateRolePayload {
    role: UsersPermissionsRole
}

type updateTypePayload {
    type: Types
}

type updateUserPayload {
    user: UsersPermissionsUser
}

enum ENUM_PRODUCTS_GENDER {
    female
    male
    unisex
}

enum PublicationState {
    LIVE
    PREVIEW
}

input BrandInput {
    created_by: ID
    name: String
    products: [ID]
    published_at: DateTime
    slug: String
    updated_by: ID
}

input ComponentAttributesBaseNoteInput {
    desc: String
}

input ComponentAttributesMiddleNoteInput {
    desc: String
}

input ComponentAttributesPerfumerInput {
    desc: String
}

input ComponentAttributesTestInput {
    _: String
}

input ComponentAttributesTopNoteInput {
    desc: String
}

input FileInfoInput {
    alternativeText: String
    caption: String
    name: String
}

input FileInput {
    alternativeText: String
    caption: String
    created_by: ID
    ext: String
    formats: JSON
    hash: String!
    height: Int
    mime: String!
    name: String!
    previewUrl: String
    provider: String!
    provider_metadata: JSON
    related: [ID]
    size: Float!
    updated_by: ID
    url: String!
    width: Int
}

input InputID {
    id: ID!
}

input ProductInput {
    brand: ID
    created_by: ID
    desc: String
    gender: ENUM_PRODUCTS_GENDER
    image: ID
    in_stock: Boolean
    name: String
    notes: String
    price: Int
    published_at: DateTime
    slug: String
    type: ID
    updated_by: ID
    volume: Int
}

input RoleInput {
    created_by: ID
    description: String
    name: String!
    permissions: [ID]
    type: String
    updated_by: ID
    users: [ID]
}

input TypeInput {
    created_by: ID
    name: String
    products: [ID]
    published_at: DateTime
    slug: String
    updated_by: ID
}

input UserInput {
    blocked: Boolean
    confirmationToken: String
    confirmed: Boolean
    created_by: ID
    email: String!
    password: String
    provider: String
    resetPasswordToken: String
    role: ID
    updated_by: ID
    username: String!
}

input UsersPermissionsLoginInput {
    identifier: String!
    password: String!
    provider: String = "local"
}

input UsersPermissionsRegisterInput {
    email: String!
    password: String!
    username: String!
}

input createBrandInput {
    data: BrandInput
}

input createProductInput {
    data: ProductInput
}

input createRoleInput {
    data: RoleInput
}

input createTypeInput {
    data: TypeInput
}

input createUserInput {
    data: UserInput
}

input deleteBrandInput {
    where: InputID
}

input deleteFileInput {
    where: InputID
}

input deleteProductInput {
    where: InputID
}

input deleteRoleInput {
    where: InputID
}

input deleteTypeInput {
    where: InputID
}

input deleteUserInput {
    where: InputID
}

input editBrandInput {
    created_by: ID
    name: String
    products: [ID]
    published_at: DateTime
    slug: String
    updated_by: ID
}

input editComponentAttributesBaseNoteInput {
    desc: String
    id: ID
}

input editComponentAttributesMiddleNoteInput {
    desc: String
    id: ID
}

input editComponentAttributesPerfumerInput {
    desc: String
    id: ID
}

input editComponentAttributesTestInput {
    id: ID
}

input editComponentAttributesTopNoteInput {
    desc: String
    id: ID
}

input editFileInput {
    alternativeText: String
    caption: String
    created_by: ID
    ext: String
    formats: JSON
    hash: String
    height: Int
    mime: String
    name: String
    previewUrl: String
    provider: String
    provider_metadata: JSON
    related: [ID]
    size: Float
    updated_by: ID
    url: String
    width: Int
}

input editProductInput {
    brand: ID
    created_by: ID
    desc: String
    gender: ENUM_PRODUCTS_GENDER
    image: ID
    in_stock: Boolean
    name: String
    notes: String
    price: Int
    published_at: DateTime
    slug: String
    type: ID
    updated_by: ID
    volume: Int
}

input editRoleInput {
    created_by: ID
    description: String
    name: String
    permissions: [ID]
    type: String
    updated_by: ID
    users: [ID]
}

input editTypeInput {
    created_by: ID
    name: String
    products: [ID]
    published_at: DateTime
    slug: String
    updated_by: ID
}

input editUserInput {
    blocked: Boolean
    confirmationToken: String
    confirmed: Boolean
    created_by: ID
    email: String
    password: String
    provider: String
    resetPasswordToken: String
    role: ID
    updated_by: ID
    username: String
}

input updateBrandInput {
    data: editBrandInput
    where: InputID
}

input updateProductInput {
    data: editProductInput
    where: InputID
}

input updateRoleInput {
    data: editRoleInput
    where: InputID
}

input updateTypeInput {
    data: editTypeInput
    where: InputID
}

input updateUserInput {
    data: editUserInput
    where: InputID
}


"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar DateTime

"A time string with format: HH:mm:ss.SSS"
scalar Time

"A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar Date

"The `Long` scalar type represents 52-bit integers"
scalar Long

"The `Upload` scalar type represents a file upload."
scalar Upload